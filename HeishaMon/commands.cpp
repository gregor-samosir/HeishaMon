#include "commands.h"

//removed checksum from default query, is calculated in send_command
byte panasonicQuery[] = {0x71, 0x6c, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
byte optionalPCBQuery[] = {0xF1, 0x11, 0x01, 0x50, 0x00, 0x00, 0x40, 0xFF, 0xFF, 0xE5, 0xFF, 0xFF, 0x00, 0xFF, 0xEB, 0xFF, 0xFF, 0x00, 0x00};


const char* mqtt_topic_values = "sdc";
const char* mqtt_topic_1wire = "1wire";
const char* mqtt_topic_s0 = "s0";
const char* mqtt_logtopic = "log";
const char* mqtt_topic_pcb = "pcb/#";


const char* mqtt_willtopic = "LWT";
const char* mqtt_iptopic = "ip";

const char* mqtt_set_heatpump_state_topic = "SetHeatpump";
const char* mqtt_set_quiet_mode_topic = "SetQuietMode";
const char* mqtt_set_z1_heat_request_temperature_topic = "SetZ1HeatRequestTemperature";
const char* mqtt_set_z1_cool_request_temperature_topic = "SetZ1CoolRequestTemperature";
const char* mqtt_set_z2_heat_request_temperature_topic = "SetZ2HeatRequestTemperature";
const char* mqtt_set_z2_cool_request_temperature_topic = "SetZ2CoolRequestTemperature";
const char* mqtt_set_operationmode_topic = "SetOperationMode";
const char* mqtt_set_force_DHW_topic = "SetForceDHW";
const char* mqtt_set_force_defrost_topic = "SetForceDefrost";
const char* mqtt_set_force_sterilization_topic = "SetForceSterilization";
const char* mqtt_set_holiday_topic = "SetHolidayMode";
const char* mqtt_set_powerful_topic = "SetPowerfulMode";
const char* mqtt_set_dhw_temp_topic = "SetDHWTemp";
const char* mqtt_send_raw_value_topic = "SendRawValue";
const char* mqtt_set_pump_topic = "SetPump";
const char* mqtt_set_pumpspeed_topic = "SetPumpSpeed";


void send_heatpump_command(char* topic, char *msg, bool (*send_command)(byte*, int), void (*log_message)(char*)) {
  char log_msg[256];

  // set heatpump state to on by sending 1
  if (strcmp(topic, mqtt_set_heatpump_state_topic) == 0)
  {
    String set_heatpump_state_string(msg);
    byte heatpump_state = 1;
    if ( set_heatpump_state_string.toInt() == 1 ) {
      heatpump_state = 2;
    }
    sprintf(log_msg, "set heatpump state to %d", heatpump_state); log_message(log_msg);
    byte command[] = {0xf1, 0x6c, 0x01, 0x10, heatpump_state, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    send_command(command, sizeof(command));
  }

  // set pump state to on by sending 1
  if (strcmp(topic, mqtt_set_pump_topic) == 0)
  {
    String set_pump_string(msg);
    byte pump_state = 16;
    if ( set_pump_string.toInt() == 1 ) {
      pump_state = 32;
    }
    sprintf(log_msg, "set pump state to %d", pump_state); log_message(log_msg);
    byte command[] = {0xf1, 0x6c, 0x01, 0x10, pump_state, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    send_command(command, sizeof(command));
  }

  // set pump speed
  if (strcmp(topic, mqtt_set_pumpspeed_topic) == 0)
  {
    String set_pumpspeed_string(msg);
    byte pumpspeed = set_pumpspeed_string.toInt() + 1;
    sprintf(log_msg, "set pump speed to %d", pumpspeed - 1); log_message(log_msg);
    byte command[] = {0xf1, 0x6c, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, pumpspeed, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    send_command(command, sizeof(command));
  }

  // set 0 for Off mode, set 1 for Quiet mode 1, set 2 for Quiet mode 2, set 3 for Quiet mode 3
  if (strcmp(topic, mqtt_set_quiet_mode_topic) == 0)
  {
    String set_quiet_mode_string(msg);
    byte quiet_mode = (set_quiet_mode_string.toInt() + 1) * 8;

    sprintf(log_msg, "set Quiet mode to %d", quiet_mode / 8 - 1); log_message(log_msg);
    byte command[] = {0xf1, 0x6c, 0x01, 0x10, 0x00, 0x00, 0x00, quiet_mode, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    send_command(command, sizeof(command));
  }

  // z1 heat request temp -  set from -5 to 5 to get same temperature shift point or set direct temp
  if (strcmp(topic, mqtt_set_z1_heat_request_temperature_topic) == 0)
  {
    String set_temperature_string(msg);
    byte request_temp = set_temperature_string.toInt() + 128;

    sprintf(log_msg, "set z1 heat request temperature to %d", request_temp - 128 ); log_message(log_msg);
    byte command[] = {0xf1, 0x6c, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, request_temp, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    send_command(command, sizeof(command));
  }

  // z1 cool request temp -  set from -5 to 5 to get same temperature shift point or set direct temp
  if (strcmp(topic, mqtt_set_z1_cool_request_temperature_topic) == 0)
  {
    String set_temperature_string(msg);
    byte request_temp = set_temperature_string.toInt() + 128;

    sprintf(log_msg, "set z1 cool request temperature to %d", request_temp - 128 ); log_message(log_msg);
    byte command[] = {0xf1, 0x6c, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, request_temp, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    send_command(command, sizeof(command));
  }

  // z2 heat request temp -  set from -5 to 5 to get same temperature shift point or set direct temp
  if (strcmp(topic, mqtt_set_z2_heat_request_temperature_topic) == 0)
  {
    String set_temperature_string(msg);
    byte request_temp = set_temperature_string.toInt() + 128;

    sprintf(log_msg, "set z2 heat request temperature to %d", request_temp - 128 ); log_message(log_msg);
    byte command[] = {0xf1, 0x6c, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, request_temp, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    send_command(command, sizeof(command));
  }

  // z2 cool request temp -  set from -5 to 5 to get same temperature shift point or set direct temp
  if (strcmp(topic, mqtt_set_z2_cool_request_temperature_topic) == 0)
  {
    String set_temperature_string(msg);
    byte request_temp = set_temperature_string.toInt() + 128;

    sprintf(log_msg, "set z2 cool request temperature to %d", request_temp - 128 ); log_message(log_msg);
    byte command[] = {0xf1, 0x6c, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, request_temp, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    send_command(command, sizeof(command));
  }

  // set mode to force DHW by sending 1
  if (strcmp(topic, mqtt_set_force_DHW_topic) == 0)
  {
    String set_force_DHW_string(msg);
    byte force_DHW_mode = 64; //hex 0x40
    if ( set_force_DHW_string.toInt() == 1 ) {
      force_DHW_mode = 128; //hex 0x80
    }
    sprintf(log_msg, "set force DHW mode to %d", force_DHW_mode); log_message(log_msg);
    byte command[] = {0xf1, 0x6c, 0x01, 0x10, force_DHW_mode, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    send_command(command, sizeof(command));
  }

  // set mode to force defrost  by sending 1
  if (strcmp(topic, mqtt_set_force_defrost_topic) == 0)
  {
    String set_force_defrost_string(msg);
    byte force_defrost_mode = 0;
    if ( set_force_defrost_string.toInt() == 1 ) {
      force_defrost_mode = 2; //hex 0x02
    }
    sprintf(log_msg, "set force defrost mode to %d", force_defrost_mode); log_message(log_msg);
    byte command[] = {0xf1, 0x6c, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, force_defrost_mode, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    send_command(command, sizeof(command));
  }

  // set mode to force sterilization by sending 1
  if (strcmp(topic, mqtt_set_force_sterilization_topic) == 0)
  {
    String set_force_sterilization_string(msg);
    byte force_sterilization_mode = 0;
    if ( set_force_sterilization_string.toInt() == 1 ) {
      force_sterilization_mode = 4; //hex 0x04
    }
    sprintf(log_msg, "set force sterilization mode to %d", force_sterilization_mode); log_message(log_msg);
    byte command[] = {0xf1, 0x6c, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, force_sterilization_mode, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    send_command(command, sizeof(command));
  }


  // set Holiday mode by sending 1, off will be 0
  if (strcmp(topic, mqtt_set_holiday_topic) == 0)
  {
    String set_holiday_string(msg);

    byte set_holiday = 16; //hex 0x10
    if ( set_holiday_string.toInt() == 1 ) {
      set_holiday = 32; //hex 0x20
    }

    sprintf(log_msg, "set holiday mode to %d", set_holiday); log_message(log_msg);
    byte command[] = {0xf1, 0x6c, 0x01, 0x10, 0x00, set_holiday, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    send_command(command, sizeof(command));
  }

  // set Powerful mode by sending 0 = off, 1 for 30min, 2 for 60min, 3 for 90 min
  if (strcmp(topic, mqtt_set_powerful_topic) == 0)
  {
    String set_powerful_string(msg);
    byte set_powerful = (set_powerful_string.toInt() ) + 73;

    sprintf(log_msg, "set powerful mode to %d", (set_powerful - 73) ); log_message(log_msg);
    byte command[] = {0xf1, 0x6c, 0x01, 0x10, 0x00, 0x00, 0x00, set_powerful, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    send_command(command, sizeof(command));
  }

  // set Heat pump operation mode  3 = DHW only, 0 = heat only, 1 = cool only, 2 = Auto, 4 = Heat+DHW, 5 = Cool+DHW, 6 = Auto + DHW
  if (strcmp(topic, mqtt_set_operationmode_topic) == 0)
  {
    String set_mode_string(msg);
    byte set_mode;
    switch (set_mode_string.toInt()) {
      case 0: set_mode = 82; break;
      case 1: set_mode = 83; break;
      case 2: set_mode = 89; break;
      case 3: set_mode = 33; break;
      case 4: set_mode = 98; break;
      case 5: set_mode = 99; break;
      case 6: set_mode = 104; break;
      default: set_mode = 0; break;
    }

    sprintf(log_msg, "set heat pump mode to %d", set_mode); log_message(log_msg);
    byte command[] = {0xf1, 0x6c, 0x01, 0x10, 0x00, 0x00, set_mode, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    send_command(command, sizeof(command));
  }

  // set DHW temperature by sending desired temperature between 40C-75C
  if (strcmp(topic, mqtt_set_dhw_temp_topic) == 0)
  {
    String set_DHW_temp_string(msg);
    byte set_DHW_temp = set_DHW_temp_string.toInt() + 128;

    sprintf(log_msg, "set DHW temperature to %d", set_DHW_temp - 128); log_message(log_msg);
    byte command[] = {0xf1, 0x6c, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, set_DHW_temp, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    send_command(command, sizeof(command));
  }
}

void set_optionalpcb(char* topic, char *msg, void (*log_message)(char*)) {
  for (int i = 0 ; i < NUMBER_OF_OPTIONALPCB_TOPICS ; i++) {
    if (strcmp(topic, optionalPcbTopics[i]) == 0) {
      char log_msg[256];
      String set_pcb_string(msg);
      if (strstr(topic, "Temp")) {
        float temp = set_pcb_string.toFloat();
        float hextemp;
        if (temp > 120) {
          hextemp = 0;
        } else if (temp < -78) {
          hextemp = 255;
        }
        else {
          byte Uref = 255;
          int constant = 3695;
          int R25 = 6340;
          byte T25 = 25;
          int Rf = 6480;
          float K = 273.15;
          float RT = R25 * exp(constant * (1 / (temp + K) - 1 / (T25 + K)));
          hextemp = Uref * (RT / (Rf + RT));
        }
        optionalPCBQuery[optionalPcbBytes[i]] = (int)hextemp;
        sprintf(log_msg, "set optional pcb %s to temp %.2f, hextemp DEC %.2f = HEX %x", optionalPcbTopics[i], temp, hextemp, (int)hextemp); log_message(log_msg);
      }
      else if (strcmp(topic, "Heat_Cool_Mode") == 0) {
        bool set_pcb_value = (set_pcb_string.toInt() == 1);
        optionalPCBQuery[optionalPcbBytes[i]] = (optionalPCBQuery[optionalPcbBytes[i]] & ~(0b1 << 7)) | ( set_pcb_value << 7 );
        sprintf(log_msg, "set optional pcb %s to %d", optionalPcbTopics[i], set_pcb_value); log_message(log_msg);        
      }
      else if (strcmp(topic, "Compressor_State") == 0) {
        bool set_pcb_value = (set_pcb_string.toInt() == 1);
        optionalPCBQuery[optionalPcbBytes[i]] = (optionalPCBQuery[optionalPcbBytes[i]] & ~(0b1 << 6)) | ( set_pcb_value << 6 );
        sprintf(log_msg, "set optional pcb %s to %d", optionalPcbTopics[i], set_pcb_value); log_message(log_msg);             
      }
      else if (strcmp(topic, "SmartGrid_Mode") == 0) {
        byte set_pcb_value = set_pcb_string.toInt();
        if ((set_pcb_value >=0) && (set_pcb_value < 4)) {
           optionalPCBQuery[optionalPcbBytes[i]] = (optionalPCBQuery[optionalPcbBytes[i]] & ~(0b11 << 4)) | ( set_pcb_value << 4 );
           sprintf(log_msg, "set optional pcb %s to %d", optionalPcbTopics[i], set_pcb_value, optionalPCBQuery[optionalPcbBytes[i]]); log_message(log_msg);    
        }
      }
      else if (strcmp(topic, "External_Thermostat_1_State") == 0) {
        byte set_pcb_value = set_pcb_string.toInt();
        if ((set_pcb_value >=0) && (set_pcb_value < 4)) {
           optionalPCBQuery[optionalPcbBytes[i]] = (optionalPCBQuery[optionalPcbBytes[i]] & ~(0b11 << 2)) | ( set_pcb_value << 2 );
           sprintf(log_msg, "set optional pcb %s to %d", optionalPcbTopics[i], set_pcb_value, optionalPCBQuery[optionalPcbBytes[i]]); log_message(log_msg);    
        }
        
      }
      else if (strcmp(topic, "External_Thermostat_2_State") == 0) {
        byte set_pcb_value = set_pcb_string.toInt();
        if ((set_pcb_value >=0) && (set_pcb_value < 4)) {
           optionalPCBQuery[optionalPcbBytes[i]] = (optionalPCBQuery[optionalPcbBytes[i]] & ~(0b11 << 0)) | ( set_pcb_value << 0 );
           sprintf(log_msg, "set optional pcb %s to %d", optionalPcbTopics[i], set_pcb_value, optionalPCBQuery[optionalPcbBytes[i]]); log_message(log_msg);    
        }
      }
      else {
        byte set_pcb_value = set_pcb_string.toInt();
        optionalPCBQuery[optionalPcbBytes[i]] = set_pcb_value;
        sprintf(log_msg, "set optional pcb %s to %s", optionalPcbTopics[i], msg); log_message(log_msg);
      }

    }
  }
}
